name: Markdown mit Argos Translate übersetzen

on:
  push:
    branches: [main]
    paths:
      - 'DE/**'
      - 'config.yaml'
      - '.github/scripts/translate_with_argos.py'
      - '.github/workflows/translate.yml'
  schedule:
    - cron: '0 2 * * *' # Jede Nacht um 02:00 UTC

jobs:
  translate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: . # Repo-Root
    steps:
      - name: Repo klonen
        uses: actions/checkout@v4

      - name: Python einrichten
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Installiere jq (für JSON-Parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Python-Pakete installieren
        run: |
          pip install --no-cache-dir argostranslate==1.9.2 pyyaml==6.0.1

      - name: Argos-Modelle prüfen, herunterladen, installieren und committen
        run: |
          set -x # Debugging aktivieren
          mkdir -p models

          echo "Lade index.json für aktuelle Modell-URLs..."
          curl --fail --retry 3 --max-time 60 -o argospm-index.json https://raw.githubusercontent.com/argosopentech/argospm-index/main/index.json || { echo "::error::Konnte index.json nicht laden!"; exit 1; }
          
          # Extrahiere URLs aus index.json
          DE_EN_URL=$(jq -r '.[] | select(.from_code=="de" and .to_code=="en") | .links[0]' argospm-index.json)
          EN_FR_URL=$(jq -r '.[] | select(.from_code=="en" and .to_code=="fr") | .links[0]' argospm-index.json)
          EN_ES_URL=$(jq -r '.[] | select(.from_code=="en" and .to_code=="es") | .links[0]' argospm-index.json)
          
          echo "Model-URLs: de_en=$DE_EN_URL, en_fr=$EN_FR_URL, en_es=$EN_ES_URL"
          
          # Prüfe, ob URLs extrahiert wurden
          if [ -z "$DE_EN_URL" ] || [ -z "$EN_FR_URL" ] || [ -z "$EN_ES_URL" ]; then
            echo "::error::Konnte eine oder mehrere URLs nicht aus index.json extrahieren!"
            exit 1
          fi

          # Extrahiere Dateinamen aus URLs
          DE_EN_FILENAME=$(basename "$DE_EN_URL")
          EN_FR_FILENAME=$(basename "$EN_FR_URL")
          EN_ES_FILENAME=$(basename "$EN_ES_URL")

          # Funktion zum robusten Herunterladen und Prüfen eines Modells
          download_and_verify_model() {
            local model_name=$1
            local model_url=$2
            local model_path="models/$model_name"
            
            if [ -f "$model_path" ] && unzip -t "$model_path" > /dev/null; then
              echo "Modell $model_name ist vorhanden und gültig."
            else
              echo "Lade Modell $model_name herunter..."
              curl --fail --retry 3 --max-time 300 -L -o "$model_path" "$model_url" || { echo "::error::Download von $model_name fehlgeschlagen!"; return 1; }
              unzip -t "$model_path" > /dev/null || { echo "::error::Heruntergeladenes $model_name ist kein gültiges ZIP-Archiv!"; return 1; }
            fi
            return 0
          }
          
          # Modelle herunterladen und überprüfen
          download_and_verify_model "$DE_EN_FILENAME" "$DE_EN_URL" || exit 1
          download_and_verify_model "$EN_FR_FILENAME" "$EN_FR_URL" || exit 1
          download_and_verify_model "$EN_ES_FILENAME" "$EN_ES_URL" || exit 1
          
          echo "Alle Modelle erfolgreich heruntergeladen und überprüft."
          ls -lh models/*.argosmodel
          
          # Installiere heruntergeladene Argos-Modelle in Runner-Umgebung
          echo "Installiere heruntergeladene Argos-Modelle..."
          python3 -c "import argostranslate.package; argostranslate.package.install_from_path('models/$DE_EN_FILENAME')" || { echo "::error::Installation von $DE_EN_FILENAME fehlgeschlagen!"; exit 1; }
          python3 -c "import argostranslate.package; argostranslate.package.install_from_path('models/$EN_FR_FILENAME')" || { echo "::error::Installation von $EN_FR_FILENAME fehlgeschlagen!"; exit 1; }
          python3 -c "import argostranslate.package; argostranslate.package.install_from_path('models/$EN_ES_FILENAME')" || { echo "::error::Installation von $EN_ES_FILENAME fehlgeschlagen!"; exit 1; }
          
          echo "Installation der Argos-Modelle im Runner abgeschlossen."
          
          # Prüfen, welche Pakete *jetzt* installiert sind
          python3 -c "import argostranslate.package; print('Aktuell installierte Pakete:', [f'{p.from_code}->{p.to_code}' for p in argostranslate.package.get_installed_packages()])"

          # Committen der Modelle zum Repo
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"
          git add models/*.argosmodel
          if git diff --staged --quiet; then
            echo "Keine Model-Änderungen zum Committen."
          else
            git commit -m "Add/Update Argos translation models [skip ci]"
            git push
          fi

      - name: Übersetzungsskript ausführen
        run: |
          set -x
          # Timeout hinzugefügt, falls Skript hängen bleibt (hier 15 Minuten)
          timeout 900 python3 .github/scripts/translate_with_argos.py || { echo "::error::Skript-Ausführung fehlgeschlagen oder Timeout!"; exit 1; }

      - name: Änderungen an Übersetzungen pushen
        run: |
          set -x
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"
          # Füge alle Änderungen im output-Verzeichnis hinzu (z.B. DEV/)
          git add DEV/
          if git diff --staged --quiet; then
            echo "Keine neuen Übersetzungen zum Committen."
          else
            git commit -m "Auto-übersetzt mit Argos: DE->EN/FR/ES [skip ci]"
            git push
          fi
