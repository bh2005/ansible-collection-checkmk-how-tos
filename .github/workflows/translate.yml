name: Translate Markdown Files with Free Markdown Translator

on:
  push:
    branches:
      - main # Der Branch, auf dem der Workflow ausgelöst werden soll
    paths:
      - 'DE/**/*.md' # Auslösen, wenn sich .md-Dateien im DE/-Ordner ändern
      - '.github/workflows/translate-markdown.yml' # Auslösen, wenn sich der Workflow selbst ändert

jobs:
  translate:
    runs-on: ubuntu-latest # Wir verwenden einen Ubuntu-Runner für die Ausführung

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Wichtig für das spätere Committen der Übersetzungen

    # Setup Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Verwenden der neuesten Python 3 Version

    - name: Clone Free Markdown Translator Repository
      # Klont das gesamte Free-Markdown-Translator-Repository in einen Unterordner
      run: |
        git clone https://github.com/CrazyMayfly/Free-Markdown-Translator.git translator-repo

    - name: Install Free Markdown Translator Dependencies
      # Installiert die Python-Abhängigkeiten aus der requirements.txt des geklonten Repos
      run: pip install -r translator-repo/requirements.txt

    - name: Prepare temporary source directory for translator
      # Erstellt ein temporäres Verzeichnis und kopiert die deutschen Markdown-Dateien hinein.
      # Der Translator wird diese temporäre Kopie verwenden, um DE/ unberührt zu lassen.
      run: |
        mkdir -p temp_translate_src
        # Kopiert alle .md-Dateien aus DE/ in das temporäre Verzeichnis
        cp -R DE/*.md temp_translate_src/
        echo "--- Contents of temp_translate_src/ after copy ---"
        ls -R temp_translate_src/

    # Konfigurationsdatei für Free Markdown Translator erstellen
    - name: Create config.yaml for Translator
      # Diese Konfigurationsdatei steuert den Free-Markdown-Translator.
      # Sie wird direkt im 'translator-repo/src/' Ordner erstellt.
      # Die Schlüsselnamen wurden an das Beispiel des Projekts angepasst.
      run: |
        cat <<EOF > translator-repo/src/config.yaml
        target_langs:
          - en
          - es
        translator: google # Oder eine andere unterstützte Engine wie 'bing', 'tencent', 'baidu', etc.
        insert_warning: true
        warning_message: "This document was translated using machine translation and may contain errors. Please review carefully."
        src_filenames:
          - '*.md'
        # Hier können Sie optional weitere Einstellungen aus der originalen config.yaml hinzufügen, z.B. front_matter_transparent_keys
        EOF

    - name: Create target translation directories
      # Stellt sicher, dass die Zielordner für die übersetzten Dateien existieren.
      run: |
        mkdir -p DEV/en
        mkdir -p DEV/es
        echo "--- Contents of DEV/ after mkdir ---"
        ls -R DEV/

    # Übersetzen der Markdown-Dateien
    - name: Translate Markdown files
      # Wechselt das Arbeitsverzeichnis zum 'src'-Ordner des Translators.
      # Führt dann MarkdownTranslator.py mit dem temporären Input-Ordner als Argument aus.
      # Der Translator speichert übersetzte Dateien im selben temporären Input-Ordner mit Sprach-Suffixen.
      run: |
        cd translator-repo/src/ # WECHSEL IN DAS ARBEITSVERZEICHNIS des Translators
        # Der Pfad ../../temp_translate_src/ ist relativ zu translator-repo/src/
        python MarkdownTranslator.py -f ../../temp_translate_src/ # AUSFÜHRUNG MIT TEMPORÄREM INPUT-ORDNER
        echo "--- Contents of temp_translate_src/ after translation ---"
        ls -R ../../temp_translate_src/ # Zeigt den Inhalt des temporären Ordners nach der Übersetzung

    - name: Move translated files to DEV folders
      # Wechselt zurück in das Hauptverzeichnis des Repositorys und verschiebt die übersetzten Dateien.
      run: |
        cd /home/runner/work/ansible-collection-checkmk-how-tos/ansible-collection-checkmk-how-tos/ # WECHSEL ZURÜCK ZUM REPO-ROOT
        
        # Verschiebt englische Übersetzungen
        for file in temp_translate_src/*.en.md; do
          if [ -f "$file" ]; then
            mv "$file" DEV/en/
          fi
        done
        # Verschiebt spanische Übersetzungen
        for file in temp_translate_src/*.es.md; do
          if [ -f "$file" ]; then
            mv "$file" DEV/es/
          fi
        done
        
        echo "--- Contents of DEV/ after move ---"
        ls -R DEV/
        
        # Bereinigt das temporäre Verzeichnis
        rm -rf temp_translate_src/
        echo "--- temp_translate_src/ removed ---"

    # Änderungen committen
    - name: Commit translations
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fügen Sie alle übersetzten Markdown-Dateien im DEV/-Ordner zum Staging hinzu.
        git add DEV/
        
        echo "--- Git status after adding DEV/ ---"
        git status
        
        # Prüfen, ob es tatsächlich Änderungen zum Committen gibt, die Git erkennt.
        # git status --porcelain gibt Zeilen aus, wenn es Änderungen gibt (M, A, D etc.)
        if git status --porcelain | grep -q .; then
          git commit -m "Automated: Translate Markdown files from DE/ to DEV/en and DEV/es using Free-Markdown-Translator"
          git push
          echo "Changes committed and pushed."
        else
          echo "No changes to commit (translations are up to date)."
        fi
      env:
        # Der Standard-GITHUB_TOKEN hat die notwendigen Berechtigungen zum Pushen
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
