name: Markdown mit Argos Translate übersetzen
on:
  push:
    branches: [main]
    paths:
      - 'DE/**'
      - 'config.yaml'
      - '.github/scripts/translate_with_argos.py'
      - '.github/workflows/translate.yml'
      - 'models/*.argosmodel'
  schedule:
    - cron: '0 0 * * *'  # Jeden Tag um Mitternacht UTC
jobs:
  translate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: .  # Repo-Root
    steps:
      - name: Repo klonen
        uses: actions/checkout@v4
      - name: Python einrichten
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Installiere jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Python-Umgebung prüfen
        run: |
          echo "Python-Version: $(python3 --version)"
          echo "Pip-Version: $(pip --version)"
          pip cache dir
          jq --version
      - name: Python-Pakete installieren
        run: |
          set -x
          export ARGOS_LOG_LEVEL=ERROR  # MWT-Warnung unterdrücken
          pip install --no-cache-dir argostranslate==1.9.2 pyyaml==6.0.2
      - name: Installierte Pakete prüfen
        run: |
          echo "Installierte Pakete:"
          pip list
      - name: Argos-Version prüfen
        run: |
          python3 -c "import argostranslate; print('Argos-Version:', getattr(argostranslate, '__version__', 'unbekannt'))"
      - name: Verfügbare Argos-Sprachpakete prüfen
        run: |
          python3 -c "import argostranslate.package; print('Installierte Pakete:', [f'{p.from_code}->{p.to_code}' for p in argostranslate.package.get_installed_packages()])" || echo "::warning::Paketprüfung fehlgeschlagen, fahre fort."
      - name: Argos-Modelle prüfen, herunterladen, installieren und committen
        run: |
          set -x
          echo "Lade index.json für aktuelle Modell-URLs..."
          curl --fail --retry 3 --max-time 60 -o argospm-index.json https://raw.githubusercontent.com/argosopentech/argospm-index/main/index.json || { echo "::error::Konnte index.json nicht laden!"; exit 1; }
          mkdir -p models
          # Extrahiere URLs aus index.json
          DE_EN_URL=$(jq -r '.[] | select(.from_code=="de" and .to_code=="en") | .links[0]' argospm-index.json)
          EN_FR_URL=$(jq -r '.[] | select(.from_code=="en" and .to_code=="fr") | .links[0]' argospm-index.json)
          EN_ES_URL=$(jq -r '.[] | select(.from_code=="en" and .to_code=="es") | .links[0]' argospm-index.json)
          echo "Model-URLs: de_en=$DE_EN_URL, en_fr=$EN_FR_URL, en_es=$EN_ES_URL"
          # Prüfe, ob URLs extrahiert wurden
          if [ -z "$DE_EN_URL" ] || [ -z "$EN_FR_URL" ] || [ -z "$EN_ES_URL" ]; then
            echo "::error::Konnte eine oder mehrere URLs nicht aus index.json extrahieren!"
            exit 1
          fi
          # de_en
          if [ -f models/translate-de_en-1_0.argosmodel ]; then
            echo "translate-de_en-1_0.argosmodel vorhanden, prüfe Integrität..."
            if unzip -t models/translate-de_en-1_0.argosmodel; then
              echo "Integrität OK."
            else
              echo "::warning::translate-de_en-1_0.argosmodel ist ungültig, lösche und lade neu..."
              rm models/translate-de_en-1_0.argosmodel
              curl --fail --retry 3 --max-time 300 -o models/translate-de_en-1_0.argosmodel "$DE_EN_URL" || { echo "::error::de_en Download fehlgeschlagen!"; exit 1; }
              unzip -t models/translate-de_en-1_0.argosmodel || { echo "::error::Heruntergeladenes de_en ist kein gültiges ZIP-Archiv!"; exit 1; }
            fi
          else
            curl --fail --retry 3 --max-time 300 -o models/translate-de_en-1_0.argosmodel "$DE_EN_URL" || { echo "::error::de_en Download fehlgeschlagen!"; exit 1; }
            unzip -t models/translate-de_en-1_0.argosmodel || { echo "::error::Heruntergeladenes de_en ist kein gültiges ZIP-Archiv!"; exit 1; }
          fi
          # en_fr
          if [ -f models/translate-en_fr-1_9.argosmodel ]; then
            echo "translate-en_fr-1_9.argosmodel vorhanden, prüfe Integrität..."
            if unzip -t models/translate-en_fr-1_9.argosmodel; then
              echo "Integrität OK."
            else
              echo "::warning::translate-en_fr-1_9.argosmodel ist ungültig, lösche und lade neu..."
              rm models/translate-en_fr-1_9.argosmodel
              curl --fail --retry 3 --max-time 300 -o models/translate-en_fr-1_9.argosmodel "$EN_FR_URL" || { echo "::error::en_fr Download fehlgeschlagen!"; exit 1; }
              unzip -t models/translate-en_fr-1_9.argosmodel || { echo "::error::Heruntergeladenes en_fr ist kein gültiges ZIP-Archiv!"; exit 1; }
            fi
          else
            curl --fail --retry 3 --max-time 300 -o models/translate-en_fr-1_9.argosmodel "$EN_FR_URL" || { echo "::error::en_fr Download fehlgeschlagen!"; exit 1; }
            unzip -t models/translate-en_fr-1_9.argosmodel || { echo "::error::Heruntergeladenes en_fr ist kein gültiges ZIP-Archiv!"; exit 1; }
          fi
          # en_es
          if [ -f models/translate-en_es-1_0.argosmodel ]; then
            echo "translate-en_es-1_0.argosmodel vorhanden, prüfe Integrität..."
            if unzip -t models/translate-en_es-1_0.argosmodel; then
              echo "Integrität OK."
            else
              echo "::warning::translate-en_es-1_0.argosmodel ist ungültig, lösche und lade neu..."
              rm models/translate-en_es-1_0.argosmodel
              curl --fail --retry 3 --max-time 300 -o models/translate-en_es-1_0.argosmodel "$EN_ES_URL" || { echo "::error::en_es Download fehlgeschlagen!"; exit 1; }
              unzip -t models/translate-en_es-1_0.argosmodel || { echo "::error::Heruntergeladenes en_es ist kein gültiges ZIP-Archiv!"; exit 1; }
            fi
          else
            curl --fail --retry 3 --max-time 300 -o models/translate-en_es-1_0.argosmodel "$EN_ES_URL" || { echo "::error::en_es Download fehlgeschlagen!"; exit 1; }
            unzip -t models/translate-en_es-1_0.argosmodel || { echo "::error::Heruntergeladenes en_es ist kein gültiges ZIP-Archiv!"; exit 1; }
          fi
          echo "Prüfe Modelle..."
          ls -lh models/*.argosmodel || echo "::warning::Keine .argosmodel-Dateien gefunden!"
          if [ -f models/translate-de_en-1_0.argosmodel ] && [ -f models/translate-en_fr-1_9.argosmodel ] && [ -f models/translate-en_es-1_0.argosmodel ]; then
            echo "Alle Modelle vorhanden, alles klar!"
          else
            echo "::error::Eines oder mehrere Modelle fehlen!"
            exit 1
          fi
          # Installiere Modelle für Argos Translate
          echo "Installiere Modelle für Argos Translate..."
          python3 -c "import argostranslate.package; argostranslate.package.install_from_path('models/translate-de_en-1_0.argosmodel')" || { echo "::error::Installation von de_en fehlgeschlagen!"; exit 1; }
          python3 -c "import argostranslate.package; argostranslate.package.install_from_path('models/translate-en_fr-1_9.argosmodel')" || { echo "::error::Installation von en_fr fehlgeschlagen!"; exit 1; }
          python3 -c "import argostranslate.package; argostranslate.package.install_from_path('models/translate-en_es-1_0.argosmodel')" || { echo "::error::Installation von en_es fehlgeschlagen!"; exit 1; }
          echo "Prüfe installierte Modelle..."
          python3 -c "import argostranslate.package; print('Installierte Pakete:', [f'{p.from_code}->{p.to_code}' for p in argostranslate.package.get_installed_packages()])" || echo "::warning::Paketprüfung fehlgeschlagen, fahre fort."
          git add models/*.argosmodel || true
          if git diff --staged --quiet; then
            echo "Keine Model-Änderungen, chill!"
          else
            echo "Neue Modelle, commiten..."
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "github-actions-bot@users.noreply.github.com"
            git commit -m "Add Argos models (de-en, en-fr, en-es) [skip ci]" || echo "::warning::Kein Commit nötig."
            git push || echo "::warning::Git push fehlgeschlagen, fahre fort."
          fi
      # Cache auskommentiert
      # - name: Argos-Sprachpakete cachen
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.local/share/argos-translate
      #     key: ${{ runner.os }}-argos-${{ hashFiles('.github/workflows/translate.yml', 'config.yaml', 'models/*.argosmodel') }}
      #     restore-keys: |
      #       ${{ runner.os }}-argos-
      - name: Übersetzungsskript-Syntax prüfen
        run: |
          set -x
          echo "Prüfe Syntax von translate_with_argos.py..."
          python3 -m py_compile .github/scripts/translate_with_argos.py || { echo "::error::Syntaxfehler in translate_with_argos.py!"; exit 1; }
      - name: Zielordner anlegen
        run: |
          mkdir -p DEV/en
          mkdir -p DEV/fr
          mkdir -p DEV/es
          mkdir -p DE
      - name: Übersetzungsskript ausführen
        run: |
          set -x
          echo "Prüfe Übersetzungsskript..."
          ls -lh .github/scripts/translate_with_argos.py || { echo "::error::Übersetzungsskript .github/scripts/translate_with_argos.py nicht gefunden!"; exit 1; }
          test -f .github/scripts/translate_with_argos.py || { echo "::error::Skript .github/scripts/translate_with_argos.py existiert nicht!"; exit 1; }
          echo "Führe Skript aus..."
          timeout 600 python3 .github/scripts/translate_with_argos.py || { echo "::error::Skript-Ausführung fehlgeschlagen oder Timeout!"; exit 1; }
      - name: Übersetzungen checken
        run: |
          set -x
          if [ -z "$(find DEV -maxdepth 2 -type f -name '*.md')" ]; then
            echo "::warning::Keine Markdowns in DEV gefunden."
            exit 0
          else
            echo "Übersetzungen gefunden, alles klar!"
            ls -lh DEV/*/*.md
          fi
      - name: Änderungen pushen
        run: |
          set -x
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"
          git add DEV/
          if git diff --staged --quiet; then
            echo "Nix zu commiten, chill!"
          else
            echo "Änderungen da, pushen wir..."
            git commit -m "Auto-übersetzt mit Argos: DE→EN/FR/ES [skip ci]"
            git push
          fi