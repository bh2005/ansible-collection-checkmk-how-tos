name: Translate Markdown Files with Free Markdown Translator

on:
  push:
    branches:
      - main # Der Branch, auf dem der Workflow ausgelöst werden soll
    paths:
      - 'DE/**/*.md' # Auslösen, wenn sich .md-Dateien im DE/-Ordner ändern
      - '.github/workflows/translate.yml' # Auslösen, wenn sich der Workflow selbst ändert

jobs:
  translate:
    runs-on: ubuntu-latest # Wir verwenden einen Ubuntu-Runner für die Ausführung

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Wichtig für das spätere Committen der Übersetzungen

    # Setup Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Verwenden der neuesten Python 3 Version

    - name: Clone Free Markdown Translator Repository
      # Klont das gesamte Free-Markdown-Translator-Repository in einen Unterordner
      run: |
        git clone https://github.com/CrazyMayfly/Free-Markdown-Translator.git translator-repo

    - name: Install Free Markdown Translator Dependencies
      # Installiert die Python-Abhängigkeiten aus der requirements.txt des geklonten Repos.
      # Die requirements.txt liegt direkt im Wurzelverzeichnis des geklonten Repos.
      run: pip install -r translator-repo/requirements.txt

    - name: Prepare temporary source directory for translator
      # Erstellt ein temporäres Verzeichnis und kopiert die deutschen Markdown-Dateien hinein.
      # Der Translator wird diese temporäre Kopie verwenden, um DE/ unberührt zu lassen.
      run: |
        mkdir -p temp_translate_src
        # Kopiert ALLE Inhalte (Dateien und Unterordner) aus DE/ rekursiv.
        cp -r DE/. temp_translate_src/
        echo "--- Contents of temp_translate_src/ after copy ---"
        ls -R temp_translate_src/

    - name: List translator-repo contents before config creation
      # Zeigt den Inhalt des geklonten Translator-Repos VOR der Erstellung der config.yaml
      run: |
        echo "--- Contents of translator-repo/ before config creation ---"
        ls -R translator-repo/src

    # Konfigurationsdatei für Free Markdown Translator erstellen
    - name: Create config.yaml for Translator
      # Diese Konfigurationsdatei steuert den Free-Markdown-Translator.
      # Sie wird direkt im 'translator-repo/src/' Ordner erstellt.
      # ALLE erwarteten Schlüssel der Configration.__init__ Methode sind nun enthalten.
      run: |
        cat <<EOF > translator-repo/src/config.yaml # ERSTELLT DIE CONFIG.YAML IM SRC-ORDNER
        # automitc conf
        target_langs: # Die Zielsprachen
          - en
          - es
        src_language: de # Die Quellsprache
        translator: google # Der zu verwendende Übersetzer
        insert_warnings: true # Warnhinweise einfügen
        warnings_mapping: # Sprachspezifische Warnmeldungen
          en: "This document was translated using machine translation and may contain errors. Please review carefully."
          es: "Este documento fue traducido por máquina y puede contener errores. Por favor, revíselo cuidadosamente."
        src_filenames: [] # Dateitypen, die übersetzt werden sollen (standardmäßig '*.md' wird vom Tool angewandt, wenn leer gelassen)
        compact_langs: [] # Sprachen für kompakte Ausgabe, leer lassen wenn nicht benötigt
        threads: 4 # Anzahl der Threads für parallele Übersetzung
        proxy: # Proxy-Einstellungen, alle Unterfelder müssen vorhanden sein
          enable: false
          host: ""
          port: 0
          user: ""
          password: ""
        front_matter_transparent_keys: [] # Front Matter Schlüssel, die nicht übersetzt werden sollen
        front_matter_key_value_keys: [] # Front Matter Schlüssel, deren String-Werte übersetzt werden sollen
        front_matter_key_value_array_keys: [] # Front Matter Schlüssel, deren Array-Werte übersetzt werden sollen
        # pivot_language wurde entfernt, da es nicht in der Configration-Klasse vorhanden ist
        EOF

    - name: List translator-repo contents after config creation
      # Zeigt den Inhalt des geklonten Translator-Repos NACH der Erstellung der config.yaml
      run: |
        echo "--- Contents of translator-repo/ after config creation ---"
        ls -R translator-repo/src
        cat config.yaml

    - name: Create target translation directories
      # Stellt sicher, dass die Zielordner für die übersetzten Dateien existieren.
      run: |
        mkdir -p DEV/en
        mkdir -p DEV/es
        echo "--- Contents of DEV/ after mkdir ---"
        ls -R DEV/

    # Übersetzen der Markdown-Dateien
    - name: Translate Markdown files
      # Wechselt das Arbeitsverzeichnis zum 'src'-Ordner des Translators.
      # Führt dann MarkdownTranslator.py mit dem temporären Input-Ordner als Argument aus.
      # Der Translator speichert übersetzte Dateien im selben temporären Input-Ordner mit Sprach-Suffixen.
      run: |
        cd translator-repo/src/ # WECHSEL IN DAS ARBEITSVERZEICHNIS des Translators
        # Der Pfad ../../temp_translate_src/ ist relativ zu translator-repo/src/
        python MarkdownTranslator.py -f ../../temp_translate_src/ # AUSFÜHRUNG MIT TEMPORÄREM INPUT-ORDNER
        echo "--- Contents of temp_translate_src/ after translation ---"
        ls -R ../../temp_translate_src/ # Zeigt den Inhalt des temporären Ordners nach der Übersetzung

    - name: Move translated files to DEV folders
      # Wechselt zurück in das Hauptverzeichnis des Repositorys und verschiebt die übersetzten Dateien.
      run: |
        # GitHub Actions setzen GITHUB_WORKSPACE als das Wurzelverzeichnis des Repositories.
        cd "$GITHUB_WORKSPACE"
        
        # Verschiebt englische Übersetzungen
        # Prüft rekursiv in temp_translate_src und seinen Unterordnern
        find temp_translate_src -name "*.en.md" -exec sh -c '
          file="$1"
          # Extrahiert den Pfad relativ zu temp_translate_src/
          relative_path="${file#temp_translate_src/}"
          # Erstellt den Zielpfad in DEV/en/, behält die Ordnerstruktur bei
          target_dir="DEV/en/$(dirname "$relative_path")"
          mkdir -p "$target_dir"
          mv "$file" "$target_dir"
        ' sh {} \;

        # Verschiebt spanische Übersetzungen
        find temp_translate_src -name "*.es.md" -exec sh -c '
          file="$1"
          relative_path="${file#temp_translate_src/}"
          target_dir="DEV/es/$(dirname "$relative_path")"
          mkdir -p "$target_dir"
          mv "$file" "$target_dir"
        ' sh {} \;
        
        echo "--- Contents of DEV/ after move ---"
        ls -R DEV/
        
        # Bereinigt das temporäre Verzeichnis
        rm -rf temp_translate_src/
        echo "--- temp_translate_src/ removed ---"

    # Änderungen committen
    - name: Commit translations
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fügen Sie alle übersetzten Markdown-Dateien im DEV/-Ordner zum Staging hinzu.
        git add DEV/
        
        echo "--- Git status after adding DEV/ ---"
        git status
        echo "--- Git staged files in DEV/ ---"
        git ls-files DEV/ # Zeigt Dateien, die tatsächlich im Staging-Bereich von DEV/ sind
        
        # Prüfen, ob es tatsächlich STAGED Änderungen im DEV/-Ordner gibt, die Git erkennen kann.
        # git diff --quiet --cached --exit-code <path> gibt Exit Code 1 zurück, wenn es Unterschiede gibt
        if ! git diff --quiet --cached --exit-code DEV/; then
          git commit -m "Automated: Translate Markdown files from DE/ to DEV/en and DEV/es using Free-Markdown-Translator"
          git push
          echo "Changes committed and pushed."
        else
          echo "No changes in DEV/ to commit."
        fi
      env:
        # Der Standard-GITHUB_TOKEN hat die notwendigen Berechtigungen zum Pushen
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
